{"mappingsosources":["src/scss/extensions/mg-grid-utilities.scss"],"sourcesContent":["@use \"sass:math\";\r\n\r\n@mixin grid-column($_gutter: $grid__gutter) {\r\n  flex: 0 0 100%;\r\n  max-width: 100%;\r\n\r\n  // Prevent columns from collapsing when empty\r\n  min-height: 0.125rem;\r\n\r\n  // Inner gutter via padding\r\n  padding-left: calc($_gutter / 2);\r\n  padding-right: calc($_gutter / 2);\r\n}\r\n\r\n//  Centered container element\r\n@mixin init-container($_gutter: $grid__gutter) {\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  padding-right: 0.8rem;\r\n  padding-left: 0.8rem;\r\n  width: 100%;\r\n}\r\n\r\n//  Creates a wrapper for a series of columns\r\n@mixin init-row($_gutter: $grid__gutter) {\r\n  display: flex;\r\n  flex: 0 1 auto;\r\n  flex-flow: row wrap;\r\n}\r\n\r\n//  Generate default columns\r\n@mixin create-x($_columns, $_gutter: $grid__gutter) {\r\n  @include grid-column($_gutter);\r\n\r\n  max-width: math.percentage(calc($_columns / $grid__columns));\r\n}\r\n\r\n@mixin create-x-offset($_columns) {\r\n  margin-left: math.percentage(calc($_columns / $grid__columns));\r\n}\r\n\r\n//  Generate small columns\r\n@mixin create-s($_columns, $_gutter: $grid__gutter) {\r\n  @include grid-column($_gutter);\r\n\r\n  @media screen and (min-width: $screen-s) {\r\n    max-width: math.percentage(calc($_columns / $grid__columns));\r\n  }\r\n}\r\n\r\n@mixin create-s-offset($_columns) {\r\n  @media screen and (min-width: $screen-s) {\r\n    margin-left: math.percentage(calc($_columns / $grid__columns));\r\n  }\r\n}\r\n\r\n//  Generate medium columns\r\n@mixin create-m($_columns, $_gutter: $grid__gutter) {\r\n  @include grid-column($_gutter);\r\n\r\n  @media screen and (min-width: $screen-m) {\r\n    max-width: math.percentage(calc($_columns / $grid__columns));\r\n  }\r\n}\r\n\r\n@mixin create-m-offset($_columns) {\r\n  @media screen and (min-width: $screen-m) {\r\n    margin-left: math.percentage(calc($_columns / $grid__columns));\r\n  }\r\n}\r\n\r\n//  Generate large columns\r\n@mixin create-l($_columns, $_gutter: $grid__gutter) {\r\n  @include grid-column($_gutter);\r\n\r\n  @media screen and (min-width: $screen-l) {\r\n    max-width: math.percentage(calc($_columns / $grid__columns));\r\n  }\r\n}\r\n\r\n@mixin create-l-offset($_columns) {\r\n  @media screen and (min-width: $screen-l) {\r\n    margin-left: math.percentage(calc($_columns / $grid__columns));\r\n  }\r\n}\r\n\r\n//  Grid generation\r\n\r\n@mixin create-all-grid-columns($i: 1,\r\n  $list: \".#{$name-x}#{$i}, .#{$name-s}#{$i}, .#{$name-m}#{$i}, .#{$name-l}#{$i}, .#{$name-xl}#{$i}\"\r\n\r\n) {\r\n  @for $i from (1 + 1) through $grid__columns {\r\n    $list: \"#{$list}, .#{$name-x}#{$i}, .#{$name-s}#{$i}, .#{$name-m}#{$i}, .#{$name-l}#{$i}, .#{$name-xl}#{$i}\";\r\n  }\r\n\r\n  #{$list} {\r\n    @include grid-column;\r\n  }\r\n}\r\n\r\n@mixin calc-grid-column($index, $class, $type) {\r\n  @if $type ==width and $index >0 {\r\n    .#{$class}#{$index} {\r\n      flex-basis: math.percentage(calc($index / $grid__columns));\r\n      max-width: math.percentage(calc($index / $grid__columns));\r\n    }\r\n  }\r\n\r\n  @if $type ==offset {\r\n    .#{$class}--offset#{$index} {\r\n      margin-left: math.percentage(calc($index / $grid__columns));\r\n    }\r\n  }\r\n\r\n  @if $type ==order {\r\n    .#{$class}--order#{$index} {\r\n      order: $index;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin loop-grid-columns($columns, $class, $type) {\r\n  @for $i from 0 through $columns {\r\n    @include calc-grid-column($i, $class, $type);\r\n  }\r\n}\r\n\r\n// Create positioning classes\r\n@mixin create-positioning-col($_class) {\r\n  .mg-col.#{$_class}--start {\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .mg-col.#{$_class}--center {\r\n    align-items: center;\r\n  }\r\n\r\n  .mg-col.#{$_class}--end {\r\n    align-items: flex-end;\r\n  }\r\n\r\n  .mg-col.#{$_class}--around {\r\n    justify-content: space-around;\r\n  }\r\n\r\n  .mg-col.#{$_class}--between {\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .mg-col.#{$_class}--evenly {\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  .mg-col.#{$_class}--top {\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .mg-col.#{$_class}--middle {\r\n    justify-content: center;\r\n  }\r\n\r\n  .mg-col.#{$_class}--bottom {\r\n    justify-content: flex-end;\r\n  }\r\n\r\n  .mg-col.#{$_class}--stretch {\r\n    justify-content: stretch;\r\n  }\r\n\r\n  .mg-col.#{$_class}--baseline {\r\n    justify-content: baseline;\r\n  }\r\n\r\n  .mg-col.#{$_class}--reverse {\r\n    flex-direction: column-reverse;\r\n  }\r\n}\r\n\r\n// Create positioning classes\r\n@mixin create-positioning-row($_class) {\r\n  .mg-row.#{$_class}--start {\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .mg-row.#{$_class}--center {\r\n    justify-content: center;\r\n  }\r\n\r\n  .mg-row.#{$_class}--end {\r\n    justify-content: flex-end;\r\n  }\r\n\r\n  .mg-row.#{$_class}--around {\r\n    justify-content: space-around;\r\n  }\r\n\r\n  .mg-row.#{$_class}--between {\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .mg-row.#{$_class}--evenly {\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  .mg-row.#{$_class}--top {\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .mg-row.#{$_class}--middle {\r\n    align-items: center;\r\n  }\r\n\r\n  .mg-row.#{$_class}--bottom {\r\n    align-items: flex-end;\r\n  }\r\n\r\n  .mg-row.#{$_class}--stretch {\r\n    align-items: stretch;\r\n  }\r\n\r\n  .mg-row.#{$_class}--baseline {\r\n    align-items: baseline;\r\n  }\r\n\r\n  .mg-row.#{$_class}--reverse {\r\n    flex-direction: row-reverse;\r\n  }\r\n}\r\n\r\n@mixin create-growing-effects($_class) {\r\n  .#{$_class}--grow {\r\n    flex: 1 1 auto;\r\n  }\r\n\r\n  .#{$_class}--ungrow {\r\n    flex: 0;\r\n  }\r\n}\r\n\r\n// Create hidden classes\r\n@mixin create-conditional-hidden($_class) {\r\n  .#{$_class}-hidden {\r\n    display: none !important;\r\n  }\r\n}\r\n\r\n// Create diplay classes\r\n@mixin create-conditional-display($_class) {\r\n  .#{$_class}-display {\r\n    display: none !important;\r\n  }\r\n}\r\n\r\n// Create grid for specific class\r\n@mixin create-grid-columns($_class) {\r\n  @include loop-grid-columns($grid__columns, $_class, width);\r\n  @include loop-grid-columns($grid__columns, $_class, offset);\r\n  @include loop-grid-columns($grid__columns, $_class, order);\r\n  @include create-positioning-row($_class);\r\n  @include create-positioning-col($_class);\r\n  @include create-growing-effects($_class);\r\n\r\n}\r\n\r\n@mixin create-gap-utilities($rem-map) {\r\n  @each $key, $value in $rem-map {\r\n    .mg-gap#{$key} {\r\n      gap: #{$value};\r\n    }\r\n\r\n    .mg-col-gap#{$key} {\r\n      column-gap: #{$value};\r\n    }\r\n\r\n    .mg-row-gap#{$key} {\r\n      row-gap: #{$value};\r\n    }\r\n  }\r\n}"],"names":[],"version":3,"file":"mgplus.css.map"}