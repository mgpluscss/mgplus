{"mappings":"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","sources":["<anon>","src/index.js","src/plugins/mgDropdown.js","src/plugins/mgModal.js","src/plugins/mgNav.js","src/plugins/mgTabs.js"],"sourcesContent":["(() => {\nfunction $4a624cfc4abd33ec$export$2e2bcd8739ae039() {\n    let currentDropdown = null;\n    document.querySelectorAll(\"[data-toggle~=dropdown]\").forEach(setupDropdown);\n    function setupDropdown(dropdownToggle) {\n        dropdownToggle.setAttribute(\"aria-haspopup\", \"true\");\n        dropdownToggle.setAttribute(\"aria-expanded\", \"false\");\n        const dropdownContent = dropdownToggle.parentNode.querySelector(\".mg-dropdown--content\");\n        dropdownContent.setAttribute(\"aria-hidden\", \"true\");\n        dropdownToggle.onclick = toggleDropdown;\n        function toggleDropdown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            if (dropdownToggle.getAttribute(\"aria-expanded\") === \"true\") {\n                dropdownToggle.setAttribute(\"aria-expanded\", \"false\");\n                dropdownContent.setAttribute(\"aria-hidden\", \"true\");\n                dropdownToggle.parentNode.classList.remove(\"opened\");\n                currentDropdown = null;\n                return;\n            }\n            closeCurrent.call(undefined);\n            dropdownToggle.setAttribute(\"aria-expanded\", \"true\");\n            dropdownContent.setAttribute(\"aria-hidden\", \"false\");\n            dropdownToggle.parentNode.classList.add(\"opened\");\n            dropdownContent.children[0].focus();\n            currentDropdown = dropdownToggle;\n            return;\n        }\n    }\n    function closeCurrent() {\n        if (currentDropdown) {\n            currentDropdown.setAttribute(\"aria-expanded\", \"false\");\n            currentDropdown.setAttribute(\"aria-hidden\", \"true\");\n            currentDropdown.parentNode.classList.remove(\"opened\");\n            currentDropdown = false;\n        }\n    }\n    window.onclick = function(event) {\n        const element = event.target;\n        if (!element.classList) return;\n        if (element.classList.contains(\"mg-dropdown\")) return;\n        if (element.classList.contains(\"mg-dropdown--button\")) return;\n        if (element.classList.contains(\"mg-dropdown--content\")) return;\n        closeCurrent.call(undefined);\n    };\n}\n\n\nfunction $77f42f0dc0d130d4$export$2e2bcd8739ae039() {\n    // Select all elements with data-toggle attribute containing \"modal\" and setup modal for each\n    document.querySelectorAll(\"[data-toggle~=modal]\").forEach(setupModal);\n    // Function to setup modal for an element\n    function setupModal(el) {\n        console.log(\"setting up modal\");\n        // Function to handle modal removal\n        function removeModalHandler() {\n            modal.classList.remove(\"mg-show\");\n        }\n        // Select the modal and close button elements\n        var modal = document.querySelector(\"#\" + el.getAttribute(\"data-target\"));\n        var close = modal.querySelector(\"[data-action=close]\");\n        // Add event listener to the element to show modal on click\n        el.addEventListener(\"click\", function(ev) {\n            modal.classList.add(\"mg-show\");\n        });\n        // Add event listener to the close button to remove modal on click\n        close.addEventListener(\"click\", function(ev) {\n            ev.stopPropagation();\n            removeModalHandler();\n        });\n    }\n}\n\n\nfunction $01d0865568d8d2d5$export$2e2bcd8739ae039() {\n    document.querySelectorAll(\"[data-toggle~=nav]\").forEach(setupNav);\n    function setupNav(nav) {\n        const items = nav.getElementsByTagName(\"li\");\n        for(let j = 0; j < items.length; j++){\n            const item = items[j];\n            if (item.classList.contains(\"active\") || item.getAttribute(\"data-active\") === \"true\") {\n                item.setAttribute(\"data-active\", \"true\");\n                item.classList.add(\"active\");\n            }\n        }\n        nav.addEventListener(\"click\", function(e) {\n            let selector = e.target;\n            console.log(e.target.parentNode);\n            if (e.target.parentNode.tagName == \"LI\") selector = e.target.parentNode;\n            if (selector.getAttribute(\"data-active\") !== \"true\") {\n                //disable all selected tabs\n                let items = nav.getElementsByTagName(\"li\");\n                for(let j = 0; j < items.length; j++){\n                    const item = items[j];\n                    item.classList.remove(\"active\");\n                    item.setAttribute(\"data-active\", \"false\");\n                }\n                //activate selected tab\n                selector.classList.add(\"active\");\n                selector.setAttribute(\"data-active\", \"true\");\n            }\n        });\n    }\n}\n\n\nfunction $55d62a83c65bc077$export$2e2bcd8739ae039() {\n    document.querySelectorAll(\"[data-toggle~=tabs]\").forEach(setupTabs);\n    function setupTabs(tabs) {\n        let items = tabs.getElementsByClassName(\"mg-tabs--item\");\n        for(let j = 0; j < items.length; j++){\n            const item = items[j];\n            if (item.classList.contains(\"active\") || item.getAttribute(\"data-active\") === \"true\") {\n                item.setAttribute(\"data-active\", \"true\");\n                item.classList.add(\"active\");\n                const targetToShow = item.getAttribute(\"data-target\");\n                if (targetToShow) {\n                    const el = document.getElementById(targetToShow);\n                    if (el) el.style.display = \"block\";\n                }\n            }\n        }\n        tabs.addEventListener(\"click\", function(e) {\n            let selector = e.target;\n            if (e.target.parentNode.classList.contains(\"mg-tabs--item\")) {\n                selector = e.target.parentNode;\n                e.stopPropagation();\n                e.preventDefault();\n                if (selector.getAttribute(\"data-active\") !== \"true\") {\n                    //disable all selected tabs\n                    let items = tabs.getElementsByClassName(\"mg-tabs--item\");\n                    for(let j = 0; j < items.length; j++){\n                        const item = items[j];\n                        item.classList.remove(\"active\");\n                        item.setAttribute(\"data-active\", \"false\");\n                        let targetToHide = item.getAttribute(\"data-target\");\n                        if (targetToHide) {\n                            const el = document.getElementById(targetToHide);\n                            if (el) el.style.display = \"none\";\n                        }\n                    }\n                    //activate selected tab\n                    selector.classList.add(\"active\");\n                    selector.setAttribute(\"data-active\", \"true\");\n                    let targetToShow = selector.getAttribute(\"data-target\");\n                    if (targetToShow) {\n                        const el = document.getElementById(targetToShow);\n                        if (el) el.style.display = \"block\";\n                    }\n                }\n            }\n        });\n    }\n}\n\n\nfunction $f9ccc1fa0d22629a$var$registerDomPlugins() {\n    (0, $4a624cfc4abd33ec$export$2e2bcd8739ae039)();\n    (0, $77f42f0dc0d130d4$export$2e2bcd8739ae039)();\n    (0, $01d0865568d8d2d5$export$2e2bcd8739ae039)();\n    (0, $55d62a83c65bc077$export$2e2bcd8739ae039)();\n}\n(function(window1) {\n    window1.mgplus = {\n        registerDomPlugins: $f9ccc1fa0d22629a$var$registerDomPlugins\n    };\n})(window);\n\n})();\n//# sourceMappingURL=index.js.map\n","import registerDropdown from \"./plugins/mgDropdown.js\";\r\nimport registerModals from \"./plugins/mgModal.js\";\r\nimport registerNavs from \"./plugins/mgNav.js\";\r\nimport registerTabs from \"./plugins/mgTabs.js\"; \r\n \r\nfunction registerDomPlugins(){\r\n \r\n  registerDropdown();\r\n  registerModals();\r\n  registerNavs();\r\n  registerTabs(); \r\n}\r\n\r\n(function(window) {\r\nwindow.mgplus = {registerDomPlugins};\r\n})(window);\r\n"," export default function registergDropdowns() {\r\n   let currentDropdown = null; \r\n   document.querySelectorAll(\"[data-toggle~=dropdown]\").forEach(setupDropdown);\r\n   function setupDropdown(dropdownToggle) {\r\n     dropdownToggle.setAttribute(\"aria-haspopup\", \"true\");\r\n     dropdownToggle.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n     const dropdownContent = dropdownToggle.parentNode.querySelector(\".mg-dropdown--content\");\r\n\r\n     dropdownContent.setAttribute(\"aria-hidden\", \"true\");\r\n\r\n     dropdownToggle.onclick = toggleDropdown;\r\n\r\n     function toggleDropdown(e) {\r\n       e.preventDefault();\r\n       e.stopPropagation();\r\n       if (dropdownToggle.getAttribute(\"aria-expanded\") === \"true\") {\r\n         dropdownToggle.setAttribute(\"aria-expanded\", \"false\");\r\n         dropdownContent.setAttribute(\"aria-hidden\", \"true\");\r\n         dropdownToggle.parentNode.classList.remove(\"opened\");\r\n         currentDropdown = null;\r\n         return;\r\n       }\r\n       closeCurrent.call(undefined);\r\n\r\n       dropdownToggle.setAttribute(\"aria-expanded\", \"true\");\r\n       dropdownContent.setAttribute(\"aria-hidden\", \"false\");\r\n       dropdownToggle.parentNode.classList.add(\"opened\");\r\n       dropdownContent.children[0].focus();\r\n       currentDropdown = dropdownToggle;\r\n       return;\r\n     }\r\n   }\r\n   function closeCurrent() {\r\n     if (currentDropdown) {\r\n       currentDropdown.setAttribute(\"aria-expanded\", \"false\");\r\n       currentDropdown.setAttribute(\"aria-hidden\", \"true\");\r\n       currentDropdown.parentNode.classList.remove(\"opened\");\r\n       currentDropdown = false;\r\n     }\r\n   }  \r\n   \r\n    window.onclick = function (event) {\r\n      const element = event.target\r\n    \r\n       if (!element.classList) return;\r\n       if (element.classList.contains(\"mg-dropdown\")) return;\r\n       if (element.classList.contains(\"mg-dropdown--button\")) return;\r\n       if (element.classList.contains(\"mg-dropdown--content\")) return;\r\n       closeCurrent.call(undefined);  \r\n     };\r\n \r\n}\r\n \r\n\r\n","export default function registerModals() {\r\n    // Select all elements with data-toggle attribute containing \"modal\" and setup modal for each\r\n    document.querySelectorAll(\"[data-toggle~=modal]\").forEach(setupModal);\r\n  \r\n    // Function to setup modal for an element\r\n    function setupModal(el) {\r\n\r\n      console.log(\"setting up modal\")\r\n      // Function to handle modal removal\r\n      function removeModalHandler() {\r\n        modal.classList.remove(\"mg-show\");      \r\n      }\r\n   \r\n      // Select the modal and close button elements\r\n      var modal = document.querySelector(\"#\" + el.getAttribute(\"data-target\"));\r\n\r\n      var  close = modal.querySelector(\"[data-action=close]\");\r\n  \r\n      // Add event listener to the element to show modal on click\r\n      el.addEventListener(\"click\", function (ev) {\r\n        modal.classList.add(\"mg-show\");\r\n      });\r\n  \r\n      // Add event listener to the close button to remove modal on click\r\n      close.addEventListener(\"click\", function (ev) {\r\n        ev.stopPropagation();\r\n        removeModalHandler();\r\n      });\r\n    } \r\n  }\r\n ","export default function registerNavs(){\r\n    document.querySelectorAll(\"[data-toggle~=nav]\").forEach(setupNav);\r\n    function setupNav(nav) {\r\n      const items = nav.getElementsByTagName(\"li\");\r\n    \r\n      for (let j = 0; j < items.length; j++) {\r\n        const item = items[j];\r\n    \r\n        if (\r\n          item.classList.contains(\"active\") ||\r\n          item.getAttribute(\"data-active\") === \"true\"      \r\n        ) {\r\n          item.setAttribute(\"data-active\", \"true\");\r\n          item.classList.add(\"active\");\r\n        }\r\n      }\r\n    \r\n      nav.addEventListener(\"click\", function (e) {\r\n        let selector = e.target;\r\n        console.log(e.target.parentNode);\r\n        if (e.target.parentNode.tagName == \"LI\") {\r\n          selector = e.target.parentNode;\r\n        }\r\n        if (selector.getAttribute(\"data-active\") !== \"true\") {\r\n          //disable all selected tabs\r\n          let items = nav.getElementsByTagName(\"li\");\r\n          for (let j = 0; j < items.length; j++) {\r\n            const item = items[j];\r\n            item.classList.remove(\"active\");\r\n            item.setAttribute(\"data-active\", \"false\");\r\n          }\r\n          //activate selected tab\r\n          selector.classList.add(\"active\");\r\n          selector.setAttribute(\"data-active\", \"true\");\r\n        }\r\n      });\r\n    }\r\n  }","export default function registerTabs(){\r\n    document.querySelectorAll(\"[data-toggle~=tabs]\").forEach(setupTabs);\r\n    function setupTabs(tabs) {\r\n      let items = tabs.getElementsByClassName(\"mg-tabs--item\");\r\n  \r\n      for (let j = 0; j < items.length; j++) {\r\n        const item = items[j];\r\n        if (\r\n          item.classList.contains(\"active\") ||\r\n          item.getAttribute(\"data-active\") === \"true\"\r\n        ) {\r\n  \r\n          item.setAttribute(\"data-active\", \"true\");\r\n          item.classList.add(\"active\");\r\n  \r\n          const targetToShow = item.getAttribute(\"data-target\");\r\n  \r\n          if (targetToShow) \r\n          {\r\n            const el = document.getElementById(targetToShow);\r\n           if (el)\r\n           { el.style.display = \"block\";\r\n          }\r\n          }\r\n        }\r\n      }\r\n  \r\n      tabs.addEventListener(\"click\", function (e) {\r\n        let selector = e.target;\r\n        if (e.target.parentNode.classList.contains(\"mg-tabs--item\")) {\r\n          selector = e.target.parentNode;\r\n  \r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n  \r\n          if (selector.getAttribute(\"data-active\") !== \"true\") {\r\n            //disable all selected tabs\r\n            let items = tabs.getElementsByClassName(\"mg-tabs--item\");\r\n  \r\n            for (let j = 0; j < items.length; j++) {\r\n              const item = items[j];\r\n              item.classList.remove(\"active\")\r\n              item.setAttribute(\"data-active\", \"false\");\r\n              let targetToHide = item.getAttribute(\"data-target\");\r\n              if (targetToHide) {\r\n                const el = document.getElementById(targetToHide);\r\n                if (el)\r\n                {\r\n                    el.style.display = \"none\";\r\n              }\r\n              }\r\n            }\r\n            //activate selected tab\r\n            selector.classList.add(\"active\");\r\n            selector.setAttribute(\"data-active\", \"true\");\r\n            let targetToShow = selector.getAttribute(\"data-target\");\r\n            if (targetToShow) {\r\n            const el = document.getElementById(targetToShow);\r\n            if (el)\r\n            {\r\n              el.style.display = \"block\";\r\n            }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } \r\n  }"],"names":["window","mgplus","registerDomPlugins","currentDropdown","closeCurrent","setAttribute","parentNode","classList","remove","document","querySelectorAll","forEach","dropdownToggle","dropdownContent","querySelector","onclick","e","preventDefault","stopPropagation","getAttribute","call","undefined","add","children","focus","event","element","target","contains","el","console","log","modal","close","addEventListener","ev","nav","items","getElementsByTagName","j","length","item","selector","tagName","tabs","getElementsByClassName","targetToShow","getElementById","style","display","targetToHide"],"version":3,"file":"index.js.map"}