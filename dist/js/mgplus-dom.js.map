{"mappings":"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","sources":["<anon>","src/plugins/mgplus-dom.js","src/plugins/mgCollapse.js","src/plugins/mgDropdown.js","src/plugins/mgModal.js","src/plugins/mgNav.js","src/plugins/mgTabs.js"],"sourcesContent":["(function () {\nfunction $f4524977cd0a76e7$export$2e2bcd8739ae039() {\n    document.querySelectorAll(\"[data-toggle~=collapse]\").forEach(setupCollapse);\n    function setupCollapse(collapseToggle) {\n        const targetToCollapse = collapseToggle.getAttribute(\"data-target\");\n        collapseToggle.setAttribute(\"aria-haspopup\", \"true\");\n        collapseToggle.setAttribute(\"aria-expanded\", \"false\");\n        const collapseContent = targetToCollapse ? document.getElementById(targetToCollapse) : collapseToggle.nextElementSibling;\n        collapseContent.setAttribute(\"aria-hidden\", \"true\");\n        collapseToggle.onclick = toggleCollapse;\n        function toggleCollapse(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            if (collapseToggle.getAttribute(\"aria-expanded\") === \"true\") {\n                collapseToggle.setAttribute(\"aria-expanded\", \"false\");\n                collapseToggle.setAttribute(\"aria-hidden\", \"true\");\n                collapseToggle.classList.remove(\"opened\");\n                return;\n            }\n            collapseToggle.setAttribute(\"aria-expanded\", \"true\");\n            collapseToggle.setAttribute(\"aria-hidden\", \"false\");\n            collapseToggle.classList.add(\"opened\");\n            return;\n        }\n    }\n}\n\n\nfunction $e8936d07690c3719$export$2e2bcd8739ae039() {\n    let currentDropdown = null;\n    document.querySelectorAll(\"[data-toggle~=dropdown]\").forEach(setupDropdown);\n    function setupDropdown(dropdownToggle) {\n        dropdownToggle.setAttribute(\"aria-haspopup\", \"true\");\n        dropdownToggle.setAttribute(\"aria-expanded\", \"false\");\n        const dropdownContent = dropdownToggle.nextElementSibling;\n        dropdownContent.setAttribute(\"aria-hidden\", \"true\");\n        dropdownToggle.onclick = toggleDropdown;\n        function toggleDropdown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            if (dropdownToggle.getAttribute(\"aria-expanded\") === \"true\") {\n                dropdownToggle.setAttribute(\"aria-expanded\", \"false\");\n                dropdownContent.setAttribute(\"aria-hidden\", \"true\");\n                dropdownToggle.classList.remove(\"opened\");\n                currentDropdown = null;\n                return;\n            }\n            closeCurrent.call(undefined);\n            dropdownToggle.setAttribute(\"aria-expanded\", \"true\");\n            dropdownContent.setAttribute(\"aria-hidden\", \"false\");\n            dropdownToggle.classList.add(\"opened\");\n            dropdownContent.children[0].focus();\n            currentDropdown = dropdownToggle;\n            return;\n        }\n    }\n    function closeCurrent() {\n        if (currentDropdown) {\n            currentDropdown.setAttribute(\"aria-expanded\", \"false\");\n            currentDropdown.setAttribute(\"aria-hidden\", \"true\");\n            currentDropdown.classList.remove(\"opened\");\n            currentDropdown = false;\n        }\n    }\n    window.onclick = function(event) {\n        const element = event.target;\n        if (!element.classList) return;\n        if (element.classList.contains(\"mg-dropdown\")) return;\n        if (element.classList.contains(\"mg-dropdown--content\")) return;\n        closeCurrent.call(undefined);\n    };\n}\n\n\nfunction $5fdf2787f6b47849$export$2e2bcd8739ae039() {\n    // Select all elements with data-toggle attribute containing \"modal\" and setup modal for each\n    document.querySelectorAll(\"[data-toggle~=modal]\").forEach(setupModal);\n    // Function to setup modal for an element\n    function setupModal(el) {\n        // Function to handle modal removal\n        function removeModalHandler() {\n            modal.classList.remove(\"mg-show\");\n        }\n        // Select the modal and close button elements\n        var modal = document.querySelector(\"#\" + el.getAttribute(\"data-target\"));\n        var close = modal.querySelector(\"[data-action=close]\");\n        // Add event listener to the element to show modal on click\n        el.addEventListener(\"click\", function(ev) {\n            modal.classList.add(\"mg-show\");\n        });\n        // Add event listener to the close button to remove modal on click\n        close.addEventListener(\"click\", function(ev) {\n            ev.stopPropagation();\n            removeModalHandler();\n        });\n    }\n}\n\n\nfunction $d35f830b20e14199$export$2e2bcd8739ae039() {\n    document.querySelectorAll(\"[data-toggle~=nav]\").forEach(setupNav);\n    function setupNav(nav) {\n        const items = nav.getElementsByTagName(\"li\");\n        for(let j = 0; j < items.length; j++){\n            const item = items[j];\n            if (item.classList.contains(\"active\") || item.getAttribute(\"data-active\") === \"true\") {\n                item.setAttribute(\"data-active\", \"true\");\n                item.classList.add(\"active\");\n            }\n        }\n        nav.addEventListener(\"click\", function(e) {\n            let selector = e.target;\n            console.log(e.target.parentNode);\n            if (e.target.parentNode.tagName == \"LI\") selector = e.target.parentNode;\n            if (selector.getAttribute(\"data-active\") !== \"true\") {\n                //disable all selected tabs\n                let items = nav.getElementsByTagName(\"li\");\n                for(let j = 0; j < items.length; j++){\n                    const item = items[j];\n                    item.classList.remove(\"active\");\n                    item.setAttribute(\"data-active\", \"false\");\n                }\n                //activate selected tab\n                selector.classList.add(\"active\");\n                selector.setAttribute(\"data-active\", \"true\");\n            }\n        });\n    }\n}\n\n\nfunction $b55c0cf17bd94299$export$2e2bcd8739ae039() {\n    document.querySelectorAll(\"[data-toggle~=tabs]\").forEach(setupTabs);\n    function setupTabs(tabs) {\n        let items = tabs.getElementsByClassName(\"mg-tabs--item\");\n        for(let j = 0; j < items.length; j++){\n            const item = items[j];\n            if (item.classList.contains(\"active\") || item.getAttribute(\"data-active\") === \"true\") {\n                item.setAttribute(\"data-active\", \"true\");\n                item.classList.add(\"active\");\n                const targetToShow = item.getAttribute(\"data-target\");\n                if (targetToShow) {\n                    const el = document.getElementById(targetToShow);\n                    if (el) el.style.display = \"block\";\n                }\n            }\n        }\n        tabs.addEventListener(\"click\", function(e) {\n            let selector = e.target;\n            if (e.target.parentNode.classList.contains(\"mg-tabs--item\")) {\n                selector = e.target.parentNode;\n                e.stopPropagation();\n                e.preventDefault();\n                if (selector.getAttribute(\"data-active\") !== \"true\") {\n                    //disable all selected tabs\n                    let items = tabs.getElementsByClassName(\"mg-tabs--item\");\n                    for(let j = 0; j < items.length; j++){\n                        const item = items[j];\n                        item.classList.remove(\"active\");\n                        item.setAttribute(\"data-active\", \"false\");\n                        let targetToHide = item.getAttribute(\"data-target\");\n                        if (targetToHide) {\n                            const el = document.getElementById(targetToHide);\n                            if (el) el.style.display = \"none\";\n                        }\n                    }\n                    //activate selected tab\n                    selector.classList.add(\"active\");\n                    selector.setAttribute(\"data-active\", \"true\");\n                    let targetToShow = selector.getAttribute(\"data-target\");\n                    if (targetToShow) {\n                        const el = document.getElementById(targetToShow);\n                        if (el) el.style.display = \"block\";\n                    }\n                }\n            }\n        });\n    }\n}\n\n\n(function(window1) {\n    function registerDomPlugins(autorun) {\n        (0, $e8936d07690c3719$export$2e2bcd8739ae039)();\n        (0, $5fdf2787f6b47849$export$2e2bcd8739ae039)();\n        (0, $d35f830b20e14199$export$2e2bcd8739ae039)();\n        (0, $b55c0cf17bd94299$export$2e2bcd8739ae039)();\n        (0, $f4524977cd0a76e7$export$2e2bcd8739ae039)();\n        console.log(`mgplus - registered DOM plugins (autorun=${autorun ? \"true\" : \"false\"})`);\n    }\n    // extracts the params from the currently running (external) script\n    function getScriptUrl() {\n        const scripts = document.getElementsByTagName(\"script\");\n        for(let i = 0; i < scripts.length; i++){\n            const scriptUrl = scripts[i] && scripts[i].src;\n            if (scriptUrl.indexOf(\"mgplus-dom.js\") > 0) return scriptUrl;\n        }\n        return null;\n    }\n    // gets the Query Params of a given query string\n    function getQueryParam(name, query) {\n        name = name.replace(/[[]/, \"\\\\[\").replace(/[]]/, \"\\\\]\");\n        var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\n        var regex = new RegExp(regexS);\n        var results = regex.exec(query);\n        if (results == null) return \"\";\n        else return results[1];\n    }\n    window1.mgplus = {\n        registerDomPlugins: registerDomPlugins\n    };\n    window1.addEventListener(\"DOMContentLoaded\", ()=>{\n        const autorun = getQueryParam(\"autorun\", getScriptUrl());\n        if (autorun === \"true\") registerDomPlugins(true);\n    });\n})(window);\n\n})();\n//# sourceMappingURL=mgplus-dom.js.map\n","import registergCollapses from \"./mgCollapse.js\";\r\nimport registerDropdown from \"./mgDropdown.js\";\r\nimport registerModals from \"./mgModal.js\";\r\nimport registerNavs from \"./mgNav.js\";\r\nimport registerTabs from \"./mgTabs.js\";\r\n\r\n(function (window) {\r\n  function registerDomPlugins(autorun) {\r\n   \r\n    registerDropdown();\r\n    registerModals();\r\n    registerNavs();\r\n    registerTabs();\r\n    registergCollapses();\r\n\r\n    console.log(\r\n      `mgplus - registered DOM plugins (autorun=${autorun ? \"true\" : \"false\"})`\r\n    );\r\n\r\n  } \r\n\r\n  // extracts the params from the currently running (external) script\r\n  function getScriptUrl() {\r\n    const scripts = document.getElementsByTagName(\"script\");\r\n\r\n    for (let i = 0; i < scripts.length; i++) {\r\n      const scriptUrl = scripts[i] && scripts[i].src;\r\n\r\n      if (scriptUrl.indexOf(\"mgplus-dom.js\") > 0) {\r\n        return scriptUrl;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // gets the Query Params of a given query string\r\n  function getQueryParam(name, query) {\r\n    name = name.replace(/[[]/, \"\\\\[\").replace(/[]]/, \"\\\\]\");\r\n    var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\r\n    var regex = new RegExp(regexS);\r\n    var results = regex.exec(query);\r\n\r\n    if (results == null) return \"\";\r\n    else return results[1];\r\n  }\r\n  window.mgplus = { registerDomPlugins };\r\n  window.addEventListener(\"DOMContentLoaded\", () => {\r\n    const autorun = getQueryParam(\"autorun\", getScriptUrl());\r\n\r\n    if (autorun === \"true\") {\r\n      registerDomPlugins(true);\r\n    }\r\n  });\r\n})(window);\r\n","export default function registergCollapses() {\r\n \r\n    document.querySelectorAll(\"[data-toggle~=collapse]\").forEach(setupCollapse);\r\n    function setupCollapse(collapseToggle) {\r\n      const targetToCollapse = collapseToggle.getAttribute(\"data-target\");\r\n      collapseToggle.setAttribute(\"aria-haspopup\", \"true\");\r\n      collapseToggle.setAttribute(\"aria-expanded\", \"false\"); \r\n      \r\n      const collapseContent = targetToCollapse ? document.getElementById(targetToCollapse) :collapseToggle.nextElementSibling;\r\n       \r\n      collapseContent.setAttribute(\"aria-hidden\", \"true\");\r\n     \r\n      collapseToggle.onclick = toggleCollapse;\r\n \r\n      function toggleCollapse(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation(); \r\n        if (collapseToggle.getAttribute(\"aria-expanded\") === \"true\") {\r\n            collapseToggle.setAttribute(\"aria-expanded\", \"false\");\r\n            collapseToggle.setAttribute(\"aria-hidden\", \"true\");\r\n            collapseToggle.classList.remove(\"opened\");  \r\n          return;\r\n        }\r\n     \r\n        collapseToggle.setAttribute(\"aria-expanded\", \"true\");\r\n        collapseToggle.setAttribute(\"aria-hidden\", \"false\");\r\n        collapseToggle.classList.add(\"opened\"); \r\n        return;\r\n      }\r\n    } \r\n }\r\n  \r\n \r\n "," export default function registergDropdowns() {\r\n   let currentDropdown = null; \r\n   document.querySelectorAll(\"[data-toggle~=dropdown]\").forEach(setupDropdown);\r\n   function setupDropdown(dropdownToggle) {\r\n     dropdownToggle.setAttribute(\"aria-haspopup\", \"true\");\r\n     dropdownToggle.setAttribute(\"aria-expanded\", \"false\"); \r\n\r\n     const dropdownContent = dropdownToggle.nextElementSibling; \r\n     dropdownContent.setAttribute(\"aria-hidden\", \"true\"); \r\n     dropdownToggle.onclick = toggleDropdown;\r\n\r\n     function toggleDropdown(e) {\r\n       e.preventDefault();\r\n       e.stopPropagation();\r\n       if (dropdownToggle.getAttribute(\"aria-expanded\") === \"true\") {\r\n         dropdownToggle.setAttribute(\"aria-expanded\", \"false\");\r\n         dropdownContent.setAttribute(\"aria-hidden\", \"true\");\r\n         dropdownToggle.classList.remove(\"opened\");\r\n         currentDropdown = null;\r\n         return;\r\n       }\r\n       closeCurrent.call(undefined);\r\n\r\n       dropdownToggle.setAttribute(\"aria-expanded\", \"true\");\r\n       dropdownContent.setAttribute(\"aria-hidden\", \"false\");\r\n       dropdownToggle.classList.add(\"opened\");\r\n       dropdownContent.children[0].focus();\r\n       currentDropdown = dropdownToggle;\r\n       return;\r\n     }\r\n   }\r\n   function closeCurrent() {\r\n     if (currentDropdown) {\r\n       currentDropdown.setAttribute(\"aria-expanded\", \"false\");\r\n       currentDropdown.setAttribute(\"aria-hidden\", \"true\");\r\n       currentDropdown.classList.remove(\"opened\");\r\n       currentDropdown = false;\r\n     }\r\n   }  \r\n   \r\n    window.onclick = function (event) {\r\n      const element = event.target\r\n    \r\n       if (!element.classList) return;\r\n       if (element.classList.contains(\"mg-dropdown\")) return; \r\n       if (element.classList.contains(\"mg-dropdown--content\")) return;\r\n       closeCurrent.call(undefined);  \r\n     };\r\n \r\n}\r\n \r\n\r\n","export default function registerModals() {\r\n    // Select all elements with data-toggle attribute containing \"modal\" and setup modal for each\r\n    document.querySelectorAll(\"[data-toggle~=modal]\").forEach(setupModal);\r\n  \r\n    // Function to setup modal for an element\r\n    function setupModal(el) { \r\n     \r\n      // Function to handle modal removal\r\n      function removeModalHandler() {\r\n        modal.classList.remove(\"mg-show\");      \r\n      }\r\n   \r\n      // Select the modal and close button elements\r\n      var modal = document.querySelector(\"#\" + el.getAttribute(\"data-target\"));\r\n\r\n      var  close = modal.querySelector(\"[data-action=close]\");\r\n  \r\n      // Add event listener to the element to show modal on click\r\n      el.addEventListener(\"click\", function (ev) {\r\n        modal.classList.add(\"mg-show\");\r\n      });\r\n  \r\n      // Add event listener to the close button to remove modal on click\r\n      close.addEventListener(\"click\", function (ev) {\r\n        ev.stopPropagation();\r\n        removeModalHandler();\r\n      });\r\n    } \r\n  }\r\n ","export default function registerNavs(){\r\n    document.querySelectorAll(\"[data-toggle~=nav]\").forEach(setupNav);\r\n    function setupNav(nav) {\r\n      const items = nav.getElementsByTagName(\"li\");\r\n    \r\n      for (let j = 0; j < items.length; j++) {\r\n        const item = items[j];\r\n    \r\n        if (\r\n          item.classList.contains(\"active\") ||\r\n          item.getAttribute(\"data-active\") === \"true\"      \r\n        ) {\r\n          item.setAttribute(\"data-active\", \"true\");\r\n          item.classList.add(\"active\");\r\n        }\r\n      }\r\n    \r\n      nav.addEventListener(\"click\", function (e) {\r\n        let selector = e.target;\r\n        console.log(e.target.parentNode);\r\n        if (e.target.parentNode.tagName == \"LI\") {\r\n          selector = e.target.parentNode;\r\n        }\r\n        if (selector.getAttribute(\"data-active\") !== \"true\") {\r\n          //disable all selected tabs\r\n          let items = nav.getElementsByTagName(\"li\");\r\n          for (let j = 0; j < items.length; j++) {\r\n            const item = items[j];\r\n            item.classList.remove(\"active\");\r\n            item.setAttribute(\"data-active\", \"false\");\r\n          }\r\n          //activate selected tab\r\n          selector.classList.add(\"active\");\r\n          selector.setAttribute(\"data-active\", \"true\");\r\n        }\r\n      });\r\n    }\r\n  }","export default function registerTabs(){\r\n    document.querySelectorAll(\"[data-toggle~=tabs]\").forEach(setupTabs);\r\n    function setupTabs(tabs) {\r\n      let items = tabs.getElementsByClassName(\"mg-tabs--item\");\r\n  \r\n      for (let j = 0; j < items.length; j++) {\r\n        const item = items[j];\r\n        if (\r\n          item.classList.contains(\"active\") ||\r\n          item.getAttribute(\"data-active\") === \"true\"\r\n        ) {\r\n  \r\n          item.setAttribute(\"data-active\", \"true\");\r\n          item.classList.add(\"active\");\r\n  \r\n          const targetToShow = item.getAttribute(\"data-target\");\r\n  \r\n          if (targetToShow) \r\n          {\r\n            const el = document.getElementById(targetToShow);\r\n           if (el)\r\n           { el.style.display = \"block\";\r\n          }\r\n          }\r\n        }\r\n      }\r\n  \r\n      tabs.addEventListener(\"click\", function (e) {\r\n        let selector = e.target;\r\n        if (e.target.parentNode.classList.contains(\"mg-tabs--item\")) {\r\n          selector = e.target.parentNode;\r\n  \r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n  \r\n          if (selector.getAttribute(\"data-active\") !== \"true\") {\r\n            //disable all selected tabs\r\n            let items = tabs.getElementsByClassName(\"mg-tabs--item\");\r\n  \r\n            for (let j = 0; j < items.length; j++) {\r\n              const item = items[j];\r\n              item.classList.remove(\"active\")\r\n              item.setAttribute(\"data-active\", \"false\");\r\n              let targetToHide = item.getAttribute(\"data-target\");\r\n              if (targetToHide) {\r\n                const el = document.getElementById(targetToHide);\r\n                if (el)\r\n                {\r\n                    el.style.display = \"none\";\r\n              }\r\n              }\r\n            }\r\n            //activate selected tab\r\n            selector.classList.add(\"active\");\r\n            selector.setAttribute(\"data-active\", \"true\");\r\n            let targetToShow = selector.getAttribute(\"data-target\");\r\n            if (targetToShow) {\r\n            const el = document.getElementById(targetToShow);\r\n            if (el)\r\n            {\r\n              el.style.display = \"block\";\r\n            }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    } \r\n  }"],"names":["window1","registerDomPlugins","autorun","currentDropdown","closeCurrent","setAttribute","classList","remove","document","querySelectorAll","forEach","dropdownToggle","dropdownContent","nextElementSibling","onclick","e","preventDefault","stopPropagation","getAttribute","call","undefined","add","children","focus","window","event","element","target","contains","el","modal","querySelector","close","addEventListener","ev","nav","items","getElementsByTagName","j","length","item","selector","console","log","parentNode","tagName","tabs","getElementsByClassName","targetToShow","getElementById","style","display","targetToHide","collapseToggle","targetToCollapse","collapseContent","mgplus","name","query","results","getScriptUrl","scripts","i","scriptUrl","src","indexOf","regex","RegExp","replace","exec"],"version":3,"file":"mgplus-dom.js.map"}